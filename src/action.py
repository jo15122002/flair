import logging

from config import load_config
from diff import fetch_pr_diff, filter_diff, split_diff
from llm import call_llm, extract_comments
from publish import post_review, post_per_comment

def main():
    cfg = load_config()
    logging.basicConfig(level=logging.INFO)

    # 1) Fetch and prepare the diff
    diff = fetch_pr_diff(cfg.REPOSITORY, cfg.PR_NUMBER, cfg.GITHUB_TOKEN)
    if not diff:
        logging.error("No diff fetched; aborting.")
        return

    diff = filter_diff(diff, cfg.EXCLUDE_PATTERNS)
    chunks = split_diff(diff, cfg.DIFF_CHUNK_SIZE)
    logging.info("Diff split into %d chunk(s).", len(chunks))

    # 2) Query LLM on each chunk, collect comments
    all_comments = []
    for idx, chunk in enumerate(chunks, start=1):
        logging.info("Chunk %d/%d", idx, len(chunks))
        reply = call_llm(chunk, cfg)
        comments = extract_comments(reply)
        # Attach the chunk so publish.post_review can compute positions
        for c in comments:
            c["_chunk"] = chunk
        all_comments.extend(comments)

    if not all_comments:
        logging.info("No suggestions generated by the LLM.")
        return

    # 3) Publish: either a single PR review or per‐comment issue posts
    if cfg.SUMMARY_MODE:
        logging.info("Posting as a single PR review with inline suggestions...")
        success = post_review(all_comments, cfg)
    else:
        logging.info("Posting one issue comment per suggestion...")
        success = post_per_comment(all_comments, cfg)

    if success:
        logging.info("✔️  Publishing completed successfully.")
    else:
        logging.error("❌  Publishing failed.")

if __name__ == "__main__":
    main()
